import { PrismaClient } from './generated/client';
import * as fs from 'fs';
import * as path from 'path';

const prisma = new PrismaClient();

async function exportToJson() {
  try {
    console.log('üîÑ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –∑ –±–∞–∑–∏...');
    
    const data = {
      users: await prisma.user.findMany(),
      products: await prisma.products.findMany(),
      attributes: await prisma.attributes.findMany(),
      // baskets: await prisma.basket.findMany(),
      // orderedProducts: await prisma.orderedProducts.findMany(),
      // orders: await prisma.order.findMany(),
      reviews: await prisma.reviews.findMany(),
    };

    const backupDir = path.join(process.cwd(), 'backup');
    if (!fs.existsSync(backupDir)) {
      fs.mkdirSync(backupDir);
    }

    const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
    const fileName = `database-backup-${timestamp}.json`;
    const filePath = path.join(backupDir, fileName);
    
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2));
    
    console.log(`–î–∞–Ω—ñ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ –≤: ${filePath}`);
    console.log('\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: ${data.users.length}`);
    console.log(`   –ü—Ä–æ–¥—É–∫—Ç–∏: ${data.products.length}`);
    console.log(`   –ê—Ç—Ä–∏–±—É—Ç–∏: ${data.attributes.length}`);
    // console.log(`   –ö–æ—à–∏–∫–∏: ${data.baskets.length}`);
    // console.log(`   –ó–∞–º–æ–≤–ª–µ–Ω—ñ —Ç–æ–≤–∞—Ä–∏: ${data.orderedProducts.length}`);
    // console.log(`   –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${data.orders.length}`);
    console.log(`   –í—ñ–¥–≥—É–∫–∏: ${data.reviews.length}`);
    
    const latestPath = path.join(backupDir, 'latest-backup.json');
    fs.writeFileSync(latestPath, JSON.stringify(data, null, 2));
    console.log(`‚úÖ –ö–æ–ø—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —è–∫: ${latestPath}`);
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

exportToJson();