// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  // url      = env("DATABASE_URL")
  url      = "file:./dev.db"
}

model Products {
  id          String       @id @default(uuid())
  name        String       @unique
  brand       String
  price       Float
  discount    Float
  description String
  image       String
  attributes  Attributes[]
}

model Attributes {
  productsId      String          @id
  Products        Products?       @relation(fields: [productsId], references: [id])
  type            ProductType
  category        ProductCategory
  color           ProductColor
  size            Size
  brand           String?
  material        String?
  countryOfOrigin String?
  weight          Float?
}

model User {
  id        String   @id @default(uuid())
  name      String   @unique
  email     String   @unique
  password  String
  role      Role     @default(user)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  orders Order[]

  reviewsById   Reviews[] @relation("UserById")
  reviewsByName Reviews[] @relation("UserByName")
}

model Order {
  id             String         @id @default(uuid())
  userId         String
  items          OrderItem[]
  total          Float
  deliveryMethod DeliveryMethod
  address        String
  phone          String
  status         String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  order Order @relation(fields: [orderId], references: [id])
}

model Reviews {
  id          String @id @default(uuid())
  userId      String
  userName    String
  reviewTitle String
  rewiew      String
  stars       Int

  userID   User @relation("UserById", fields: [userId], references: [id])
  userNAME User @relation("UserByName", fields: [userName], references: [name])
}

enum Role {
  admin
  user
  manager
  support
  system
}

enum ProductType {
  hoodie
  sweatshirt
  shirt
  tshirt
}

enum ProductCategory {
  male
  female
}

enum ProductColor {
  black
  white
  yellow
  pink
  brown
  blue
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
}

enum DeliveryMethod {
  Mail
  Courier
  Pickup
}
